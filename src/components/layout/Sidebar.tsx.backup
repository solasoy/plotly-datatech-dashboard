import React, { useState } from 'react';
import { DashboardDatasets } from '../../types/dashboard.types';

interface SidebarProps {
  isOpen: boolean;
  datasets: DashboardDatasets;
  importState: {
    hasData: boolean;
    recordCounts: {
      revenue: number;
      customer: number;
      performance: number;
      geographic: number;
    };
    lastImported: Date | null;
  };
  onClose: () => void;
}

const Sidebar: React.FC<SidebarProps> = ({
  isOpen,
  datasets,
  importState,
  onClose
}) => {
  const [activeSection, setActiveSection] = useState('overview');
  const [expandedSections, setExpandedSections] = useState({
    filters: true,
    charts: true,
    data: false,
    settings: false
  });

  const toggleSection = (section: string) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section as keyof typeof prev]
    }));
  };

  const navigationItems = [
    { id: 'overview', icon: 'üìä', label: 'Dashboard Overview', active: true },
    { id: 'revenue', icon: 'üí∞', label: 'Revenue Analytics' },
    { id: 'customers', icon: 'üë•', label: 'Customer Insights' },
    { id: 'performance', icon: 'üìà', label: 'Performance Metrics' },
    { id: 'geographic', icon: 'üåç', label: 'Geographic Sales' },
    { id: 'python', icon: 'üêç', label: 'Python Analysis' },
    { id: 'data-tables', icon: 'üìã', label: 'Data Tables' }
  ];

  const quickFilters = [
    { id: 'timeRange', label: 'Time Range', value: '1Y', options: ['6M', '1Y', '2Y', 'All'] },
    { id: 'department', label: 'Department', value: 'All', options: ['All', 'Sales', 'Marketing', 'Engineering'] },
    { id: 'region', label: 'Region', value: 'All', options: ['All', 'North America', 'Europe', 'Asia'] },
    { id: 'metric', label: 'Primary Metric', value: 'Revenue', options: ['Revenue', 'Customers', 'Growth Rate'] }
  ];

  if (!isOpen) return null;

  return (
    <aside className="w-80 bg-white border-r border-gray-200 overflow-y-auto h-[calc(100vh-4rem)] flex-shrink-0">
        <div className="p-4">
          {/* Close button for mobile */}
          <div className="flex items-center justify-between mb-4 lg:hidden">
            <h2 className="text-lg font-semibold text-gray-900">Navigation</h2>
            <button
              onClick={onClose}
              className="p-2 text-gray-500 hover:text-gray-700 rounded-lg hover:bg-gray-100"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          {/* Navigation Menu */}
          <nav className="space-y-2 mb-6">
            <h3 className="text-xs font-semibold text-gray-500 uppercase tracking-wide">Navigation</h3>
            {navigationItems.map(item => (
              <button
                key={item.id}
                onClick={() => setActiveSection(item.id)}
                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                  activeSection === item.id
                    ? 'bg-blue-50 text-blue-700 border border-blue-200'
                    : 'text-gray-700 hover:bg-gray-100'
                }`}
              >
                <span className="text-base">{item.icon}</span>
                <span>{item.label}</span>
                {item.id === 'overview' && activeSection === item.id && (
                  <div className="ml-auto w-2 h-2 bg-blue-500 rounded-full"></div>
                )}
              </button>
            ))}
          </nav>

          {/* Quick Filters Section */}
          <div className="space-y-4">
            <button
              onClick={() => toggleSection('filters')}
              className="flex items-center justify-between w-full text-xs font-semibold text-gray-500 uppercase tracking-wide hover:text-gray-700"
            >
              <span>Quick Filters</span>
              <svg 
                className={`w-4 h-4 transition-transform ${expandedSections.filters ? 'rotate-180' : ''}`}
                fill="none" 
                stroke="currentColor" 
                viewBox="0 0 24 24"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
              </svg>
            </button>
            
            {expandedSections.filters && (
              <div className="space-y-3">
                {quickFilters.map(filter => (
                  <div key={filter.id}>
                    <label className="block text-xs font-medium text-gray-700 mb-1">
                      {filter.label}
                    </label>
                    <select className="w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                      {filter.options.map(option => (
                        <option 
                          key={option} 
                          value={option}
                          selected={option === filter.value}
                        >
                          {option}
                        </option>
                      ))}
                    </select>
                  </div>
                ))}
                
                <button className="w-full px-3 py-2 text-sm font-medium text-white bg-blue-500 rounded-lg hover:bg-blue-600 transition-colors">
                  Apply Filters
                </button>
              </div>
            )}
          </div>

          {/* Charts Configuration */}
          <div className="space-y-4 mt-6">
            <button
              onClick={() => toggleSection('charts')}
              className="flex items-center justify-between w-full text-xs font-semibold text-gray-500 uppercase tracking-wide hover:text-gray-700"
            >
              <span>Chart Settings</span>
              <svg 
                className={`w-4 h-4 transition-transform ${expandedSections.charts ? 'rotate-180' : ''}`}
                fill="none" 
                stroke="currentColor" 
                viewBox="0 0 24 24"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
              </svg>
            </button>
            
            {expandedSections.charts && (
              <div className="space-y-3">
                <div className="space-y-2">
                  <div className="flex items-center justify-between p-2 bg-gray-50 rounded-lg">
                    <span className="text-sm font-medium text-gray-700">üí∞ Revenue Chart</span>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input type="checkbox" className="sr-only peer" defaultChecked />
                      <div className="w-9 h-5 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-4 after:w-4 after:transition-all peer-checked:bg-blue-600"></div>
                    </label>
                  </div>
                  
                  <div className="flex items-center justify-between p-2 bg-gray-50 rounded-lg">
                    <span className="text-sm font-medium text-gray-700">üë• Customer Chart</span>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input type="checkbox" className="sr-only peer" defaultChecked />
                      <div className="w-9 h-5 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-4 after:w-4 after:transition-all peer-checked:bg-blue-600"></div>
                    </label>
                  </div>
                  
                  <div className="flex items-center justify-between p-2 bg-gray-50 rounded-lg">
                    <span className="text-sm font-medium text-gray-700">üìà Performance Chart</span>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input type="checkbox" className="sr-only peer" defaultChecked />
                      <div className="w-9 h-5 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-4 after:w-4 after:transition-all peer-checked:bg-blue-600"></div>
                    </label>
                  </div>
                  
                  <div className="flex items-center justify-between p-2 bg-gray-50 rounded-lg">
                    <span className="text-sm font-medium text-gray-700">üåç Geographic Chart</span>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input type="checkbox" className="sr-only peer" defaultChecked />
                      <div className="w-9 h-5 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-4 after:w-4 after:transition-all peer-checked:bg-blue-600"></div>
                    </label>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Data Summary */}
          <div className="space-y-4 mt-6">
            <button
              onClick={() => toggleSection('data')}
              className="flex items-center justify-between w-full text-xs font-semibold text-gray-500 uppercase tracking-wide hover:text-gray-700"
            >
              <span>Data Summary</span>
              <svg 
                className={`w-4 h-4 transition-transform ${expandedSections.data ? 'rotate-180' : ''}`}
                fill="none" 
                stroke="currentColor" 
                viewBox="0 0 24 24"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
              </svg>
            </button>
            
            {expandedSections.data && (
              <div className="space-y-2">
                {importState.hasData ? (
                  <>
                    <div className="p-3 bg-blue-50 rounded-lg border border-blue-200">
                      <div className="flex items-center justify-between">
                        <span className="text-sm font-medium text-blue-900">Revenue Records</span>
                        <span className="text-sm font-bold text-blue-700">{importState.recordCounts.revenue}</span>
                      </div>
                    </div>
                    
                    <div className="p-3 bg-green-50 rounded-lg border border-green-200">
                      <div className="flex items-center justify-between">
                        <span className="text-sm font-medium text-green-900">Customer Records</span>
                        <span className="text-sm font-bold text-green-700">{importState.recordCounts.customer}</span>
                      </div>
                    </div>
                    
                    <div className="p-3 bg-purple-50 rounded-lg border border-purple-200">
                      <div className="flex items-center justify-between">
                        <span className="text-sm font-medium text-purple-900">Performance Records</span>
                        <span className="text-sm font-bold text-purple-700">{importState.recordCounts.performance}</span>
                      </div>
                    </div>
                    
                    <div className="p-3 bg-orange-50 rounded-lg border border-orange-200">
                      <div className="flex items-center justify-between">
                        <span className="text-sm font-medium text-orange-900">Geographic Records</span>
                        <span className="text-sm font-bold text-orange-700">{importState.recordCounts.geographic}</span>
                      </div>
                    </div>
                    
                    <div className="text-xs text-gray-500 mt-2">
                      Last updated: {importState.lastImported?.toLocaleString()}
                    </div>
                  </>
                ) : (
                  <div className="p-3 bg-gray-50 rounded-lg text-center">
                    <p className="text-sm text-gray-600">No data imported yet</p>
                  </div>
                )}
              </div>
            )}
          </div>

          {/* Settings */}
          <div className="space-y-4 mt-6">
            <button
              onClick={() => toggleSection('settings')}
              className="flex items-center justify-between w-full text-xs font-semibold text-gray-500 uppercase tracking-wide hover:text-gray-700"
            >
              <span>Settings</span>
              <svg 
                className={`w-4 h-4 transition-transform ${expandedSections.settings ? 'rotate-180' : ''}`}
                fill="none" 
                stroke="currentColor" 
                viewBox="0 0 24 24"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
              </svg>
            </button>
            
            {expandedSections.settings && (
              <div className="space-y-2">
                <button className="w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-lg">
                  üé® Theme Settings
                </button>
                <button className="w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-lg">
                  üì§ Export Preferences
                </button>
                <button className="w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-lg">
                  üîî Notifications
                </button>
                <button className="w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-lg">
                  üîß Advanced Settings
                </button>
              </div>
            )}
          </div>
        </div>
    </aside>
  );
};

export default Sidebar;